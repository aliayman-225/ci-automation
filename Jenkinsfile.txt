def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]
pipeline {
    agent any
    tools {
	    maven "MAVEN3"
	    jdk "OracleJDK8"
	}

    environment {
        dockerImageName = "vprofile:${env.BUILD_ID}"
        JCR_SERVER = 'http://192.168.146.138:8082/artifactory/vprofile/'
        JCR_REPOSITORY = 'vprofile'
        DOCKERFILE_PATH = './Docker-files/app/multistage/'
    }
  stages {
    stage('Fetch code'){
      steps {
        git branch: 'docker-jcr', url: 'https://github.com/aliayman-225/ci-automation.git'
      }
    }


    stage('Test'){
      steps {
        sh 'mvn test'
      }
    }

    stage ('CODE ANALYSIS WITH CHECKSTYLE'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }

        stage('build && SonarQube analysis') {
            environment {
             scannerHome = tool 'sonar4.7'
          }
            steps {
                withSonarQubeEnv('sonar') {
                 sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                    
                }
            }
        }

    // stage('Build App Image') {
    //   steps {
       
    //         script {
    //                  dockerImage = docker.build( "vprofile" + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
    //         }

    //  }
    
    // }
    
    
     stage('Push Docker Image to JCR') {
            steps {
                script {
                    sh "docker login -u admin -p Passw0rd http://192.168.146.138:8082/artifactory/vprofile/"
                    sh "docker build -f ./Docker-files/app/multistage/Dockerfile . -t  192.168.146.138:8082/vprofile/vprofile:${BUILD_NUMBER}"
                    sh "docker push  192.168.146.138:8082/vprofile/vprofile:${BUILD_NUMBER}"
                }
            }
        }


  }
      post {
        always {
            echo 'Slack Notifications.'
            slackSend channel: '#devops',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
